# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Community Automation 

on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
#   pull_request_review:
#     types: 
#       - submitted
#   schedule:
#     - cron: '0 4 * * MON-FRI'
  workflow_dispatch:

env:
  BROWSER: Chrome
  #BROWSER: Firefox
  LINK_COMMUNITY: https://uat-community.musictribe.com/
  #LINK_COMMUNITY: https://community.musictribe.com/

jobs:
  test-path-json:
    name: Output Test Path From Json
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        repository: MT-QA-Automation/Community
        token: ${{ secrets.MT_RF_REPO_PAT }}    
    - id: set_matrix
      run: |
        content="$(cat test-path.json)"
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
        echo "::set-output name=json::$content"
    outputs: 
      matrix: ${{ steps.set_matrix.outputs.json }}
  set-up:
    needs: test-path-json
    name: Set-up
    runs-on: windows-latest
    strategy:
      fail-fast: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        repository: MT-QA-Automation/Community
        token: ${{ secrets.MT_RF_REPO_PAT }}
#     - name: Setup Python 3.9
#       uses: actions/setup-python@v2
#       with:
#         python-version: 3.9
#     - name: Install Python Libraries
#       run: pip install -r requirements.txt
    - name: Install Chromedriver
      if: ${{ env.BROWSER == 'Chrome' }}
      uses: nanasess/setup-chromedriver@master
    - name: Install Geckodriver
      if: ${{ env.BROWSER == 'Firefox' }}
      uses: browser-actions/setup-geckodriver@latest
    - name: Adjust Resolution 
      run: Set-DisplayResolution -Width 1920 -Height 1080 -Force
  login:
    needs: [test-path-json, set-up]
    name: Login
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix: 
        include: ${{fromJson(needs.test-path-json.outputs.matrix).login}}
    steps:
    # - name: Checkout code
    #   uses: actions/checkout@v2
    #   with:
    #     repository: MT-QA-Automation/Community
    #     token: ${{ secrets.MT_RF_REPO_PAT }}
    - name: Setup Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install Python Libraries
      run: pip install -r requirements.txt
    - name: Run Robot Tests 
      run: robot -T -v "BROWSER:${{env.BROWSER}}" -v "LINK_COMMUNITY:${{env.LINK_COMMUNITY}}" -d "Results" -r NONE -e Deferred "${{matrix.test-suite}}"
    - name: Upload Artifacts
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: ${{matrix.name}} Logs
        path: Results




  # job1:
  #   name: Output Test Path From Json
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
  #     with:
  #       repository: MT-QA-Automation/Community
  #       token: ${{ secrets.MT_RF_REPO_PAT }}    
  #   - id: set_matrix
  #     run: |
  #       content="$(cat test-path.json)"
  #       content="${content//'%'/'%25'}"
  #       content="${content//$'\n'/'%0A'}"
  #       content="${content//$'\r'/'%0D'}"
  #       echo "::set-output name=json::$content"
  #   outputs: 
  #     matrix: ${{ steps.set_matrix.outputs.json }}
  # job2:
  #   needs: job1
  #   name: Login
  #   runs-on: windows-latest
  #   strategy:
  #     fail-fast: false
  #     matrix: 
  #       include: ${{fromJson(needs.job1.outputs.matrix).login}}
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
  #     with:
  #       repository: MT-QA-Automation/Community
  #       token: ${{ secrets.MT_RF_REPO_PAT }}
  #   - name: Setup Python 3.9
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.9
  #   - name: Install Python Libraries
  #     run: pip install -r requirements.txt
  #   - name: Install Chromedriver
  #     if: ${{ env.BROWSER == 'Chrome' }}
  #     uses: nanasess/setup-chromedriver@master
  #   - name: Install Geckodriver
  #     if: ${{ env.BROWSER == 'Firefox' }}
  #     uses: browser-actions/setup-geckodriver@latest
  #   - name: Adjust Resolution 
  #     run: Set-DisplayResolution -Width 1920 -Height 1080 -Force
  #   - name: Run Robot Tests 
  #     run: robot -T -v "BROWSER:${{env.BROWSER}}" -v "LINK_COMMUNITY:${{env.LINK_COMMUNITY}}" -d "Results" -r NONE -e Deferred "${{matrix.test-suite}}"
  #   - name: Upload Artifacts
  #     if: always()
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ${{matrix.name}} Logs
  #       path: Results
  # job3:
  #   needs: job1
  #   name: Global Header
  #   runs-on: windows-latest
  #   strategy:
  #     fail-fast: false
  #     matrix: 
  #       include: ${{fromJson(needs.job1.outputs.matrix).global-header}}
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
  #     with:
  #       repository: MT-QA-Automation/Community
  #       token: ${{ secrets.MT_RF_REPO_PAT }}
  #   - name: Setup Python 3.9
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.9
  #   - name: Install Python Libraries
  #     run: pip install -r requirements.txt
  #   - name: Install Chromedriver
  #     if: ${{ env.BROWSER == 'Chrome' }}
  #     uses: nanasess/setup-chromedriver@master
  #   - name: Install Geckodriver
  #     if: ${{ env.BROWSER == 'Firefox' }}
  #     uses: browser-actions/setup-geckodriver@latest
  #   - name: Adjust Resolution 
  #     run: Set-DisplayResolution -Width 1920 -Height 1080 -Force
  #   - name: Run Robot Tests 
  #     run: robot -T -v "BROWSER:${{env.BROWSER}}" -v "LINK_COMMUNITY:${{env.LINK_COMMUNITY}}" -d "Results" -r NONE -e Deferred "${{matrix.test-suite}}"
  #   - name: Upload Artifacts
  #     if: always()
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ${{matrix.name}} Logs
  #       path: Results
  # job4:
  #   needs: job1
  #   name: Homepage
  #   runs-on: windows-latest
  #   strategy:
  #     fail-fast: false
  #     matrix: 
  #       include: ${{fromJson(needs.job1.outputs.matrix).homepage}}
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
  #     with:
  #       repository: MT-QA-Automation/Community
  #       token: ${{ secrets.MT_RF_REPO_PAT }}
  #   - name: Setup Python 3.9
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.9
  #   - name: Install Python Libraries
  #     run: pip install -r requirements.txt
  #   - name: Install Chromedriver
  #     if: ${{ env.BROWSER == 'Chrome' }}
  #     uses: nanasess/setup-chromedriver@master
  #   - name: Install Geckodriver
  #     if: ${{ env.BROWSER == 'Firefox' }}
  #     uses: browser-actions/setup-geckodriver@latest
  #   - name: Adjust Resolution 
  #     run: Set-DisplayResolution -Width 1920 -Height 1080 -Force
  #   - name: Run Robot Tests 
  #     run: robot -T -v "BROWSER:${{env.BROWSER}}" -v "LINK_COMMUNITY:${{env.LINK_COMMUNITY}}" -d "Results" -r NONE -e Deferred "${{matrix.test-suite}}"
  #   - name: Upload Artifacts
  #     if: always()
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ${{matrix.name}} Logs
  #       path: Results
